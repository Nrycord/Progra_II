Unidades a desarrollar:
1- Tipos abstractos de datos (2 semanas)
2- Aritmetica de punteros(1.5 semanas) (es primordial dominar este tema)
3- Estructuras de tipo pilas (1.5 semanas) 
4- Recursividad (1 semana)
5- Estructuras de tipo colas (1.5 semanas)
6- Estructuras de tipo listas (2.5 semanas)
7- Estructuras de tipo árboles (4 semanas)
8- Metodos de ordenación y búsqueda (2 semanas)

Parciales:
primer parcial- unidad(1-3) 		  		 15%
segundo parcial- unidad(5-6) 		  		 20%
tercer parcial- unidad(7-8) 		  		 20%

Laboratorios:
primer laboratorio- unidad(1-6) 6%	}
segundo laboratorio- unidad(7-8) 6%	}		 25%	
participacion, asistencia y tareas 8%	}

Proyecto final:
Sistema completo grupal(investigación y presentacion)	 25%


Bibliografia:
Algoritmos y estructura de datos (Luis Joyanes Aguilar)
Programacion en c, c++, java y uml(Luis Joyanes Aguilar)
Estructuras de datos en c y c++(yedidyah langsam)
Estructuras de datos(osvaldo cairó)

---------------------------------------------------------------------------------------
CLASE 1:
tad- tipos abstactos de datos.

abstraccion --> Ocultar, Detallar, De implementacion.

Algunos ejemplos: (
		-estructura
		-pila de datos (se estrae el ultimo elemento de la pila)
		-colas (se extrae el primer elemento que llega)
		-listas (puede hacer la funcion de una pila o de una cola)
		-árboles  
	    )

Parametros por valor: Se pasa una copia de la variable dentro de la funcion, de forma que se vuelve independiente de la original. (utilizados para cantidad de datos pequeños)

Parametros por referencia: Se pasa la ubicacion de la variable original, de esa forma si el valor de la variable cambia en la funcion este tambien cambia en el exterior. (utiliza las posiciones de memeria de la computadora). (utilizados para arreglos, estructuras, clases, etc. Especialmente cuando la cantidad de datos es masiva)

Puntero: variable que guarda la posicion de una variable (int *p = &a;) se puede decir que "p" apunta hacia "a"

Operador unario (*) : Permite el acceso al contenido de la direccion apuntada por la variable puntero que le sucede (|p=&c;|*p=2;|f=*p+1;|es lo mismo que |c=2;| y |f=c+1|)